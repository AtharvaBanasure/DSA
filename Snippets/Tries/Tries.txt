/******************************************************************************

Welcome to GDB Online.
GDB online is an online compiler and debugger tool for C, C++, Python, Java, PHP, Ruby, Perl,
C#, OCaml, VB, Swift, Pascal, Fortran, Haskell, Objective-C, Assembly, HTML, CSS, JS, SQLite, Prolog.
Code, Compile, Run and Debug online from anywhere in world.

*******************************************************************************/
import java.util.*;
public class Main
{
    static class Node{
        Node children[]=new Node[26];
        boolean eow=false;
        int freq=0;
        
        Node(){
            for(int i=0;i<26;i++){
                children[i]=null;
            }
        }
    }
    
    public static Node root=new Node();
    
    public static void insert(String word){
        Node curr=root;
        for(int level=0;level<word.length();level++){
            int idx=word.charAt(level)-'a';
            
            if(curr.children[idx]==null){
                curr.children[idx]=new Node();
            }
            curr.freq++;
            curr=curr.children[idx];
        }
        curr.eow=true;
    }
    
    public static boolean search(String key){
        Node curr=root;
        for(int level=0;level<key.length();level++){
            int idx=key.charAt(level)-'a';
            if(curr.children[idx]==null){
                return false;
            }
            curr=curr.children[idx];
        }
        if(curr.eow==true){
            return true;
        }else{
            return false;
        }
    }
    
    public static ArrayList<String> f(String words[]){
        ArrayList<String>arr=new ArrayList<>();
        for(int i=0;i<words.length;i++){
            Node curr=root;
            String s="";
            boolean ok=false;
            for(int level=0;level<words[i].length();level++){
                int idx=words[i].charAt(level)-'a';
                if(curr.freq>1 && ok==false){
                    s=s+words[i].charAt(level);
                }else if(curr.freq==1){
                    // s+=words[i].charAt(level);
                    ok=true;
                    break;
                }
                curr=curr.children[idx];
            }
            arr.add(s);
        }
        return arr;
    }
    
    
	public static void main(String[] args) {
		String words[]={"zebra","dog","duck","dove"};
		
		for(int i=0;i<words.length;i++){
		    insert(words[i]);
		}
    
        ArrayList<String>str=f(words);
        System.out.println(str);
	}
}
