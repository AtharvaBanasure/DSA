//------------<-------IMP------------------>
//Dijkstra does not work for the negative weights and negative weight cycle because it will fall into an infinite loop

class Solution
{
    //Function to find the shortest distance of all the vertices
    //from the source vertex S.
    static int[] dijkstra(int n, ArrayList<ArrayList<ArrayList<Integer>>> adj, int s)
    {
        // Write your code here
        
        PriorityQueue<int[]>pq=new PriorityQueue<>((a,b)->{
            if(a[0]==b[0]){
                return a[1]-b[1];
            }else{
                return a[0]-b[0];
            }
        });
        
        
        int dist[]=new int[n];
        Arrays.fill(dist,Integer.MAX_VALUE);
        
        dist[s]=0;
        pq.add(new int[]{0,s});
        
        while(!pq.isEmpty()){
            int p[]=pq.remove();
            
            int d=p[0];
            int node=p[1];
            
            for(int i=0;i<adj.get(node).size();i++){
                ArrayList<Integer>a=adj.get(node).get(i);
                int v=a.get(0);
                int w=a.get(1);
                if(dist[node]!=Integer.MAX_VALUE && dist[node]+w<dist[v]){
                    dist[v]=dist[node]+w;
                    pq.add(new int[]{dist[v],v});
                }
            }
        }
        return dist;
    }
}