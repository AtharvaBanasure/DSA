class Solution
{
    static void dfs(int node,int vis[],Stack<Integer>st,ArrayList<ArrayList<Integer>> adj){
        vis[node]=1;
        for(int i:adj.get(node)){
            if(vis[i]==0){
                dfs(i,vis,st,adj);
            }
        }
        st.push(node);
    }
    //Function to return list containing vertices in Topological order. 
    static int[] topoSort(int v, ArrayList<ArrayList<Integer>> adj) 
    {
        // add your code here
        int vis[]=new int[v];
        Stack<Integer>st=new Stack<>();
        
        for(int i=0;i<adj.size();i++){
            if(vis[i]==0){
                dfs(i,vis,st,adj);
            }
        }
        
        ArrayList<Integer>a=new ArrayList<>();
        int i=0;
        while(!st.isEmpty()){
            a.add(st.peek());
            st.pop();
            i++;
        }
        int ans[]=new int[a.size()];
        
        for(int j=0;j<a.size();j++){
            ans[j]=a.get(j);
        }
        return ans;
    }
}