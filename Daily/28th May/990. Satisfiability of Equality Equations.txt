class DisjointSet{
    List<Integer>size=new ArrayList<>();
    List<Integer>parent=new ArrayList<>();
    
    public DisjointSet(int n){
        for(int i=0;i<=n;i++){
            size.add(1);
            parent.add(i);
        }
    }
    
    public int findUPar(int node){
        if(node==parent.get(node)){
            return node;
        }
        int ulp=findUPar(parent.get(node));
        parent.set(node,ulp);
        return parent.get(node);
    }
    
    public void unionBySize(int u,int v){
        int ulp_u=findUPar(u);
        int ulp_v=findUPar(v);
        if(ulp_u==ulp_v)return;
        
        if(size.get(ulp_u)<size.get(ulp_v)){
            parent.set(ulp_u,ulp_v);
            size.set(ulp_v,size.get(ulp_v)+size.get(ulp_u));
        }
        else{
            parent.set(ulp_v,ulp_u);
            size.set(ulp_u,size.get(ulp_u)+size.get(ulp_v));
        }
    }
}
class Solution {
    public boolean equationsPossible(String[] arr) {
        int n=arr.length;
        DisjointSet ds=new DisjointSet(26);
        for(int i=0;i<n;i++){
            String s=arr[i];

            if(s.charAt(1)=='='){
                ds.unionBySize(s.charAt(0)-'a',s.charAt(3)-'a');
            }
        }

        for(int i=0;i<n;i++){
            String s=arr[i];
            if(s.charAt(1)=='!'){
                int a=ds.findUPar(s.charAt(0)-'a');
                int b=ds.findUPar(s.charAt(3)-'a');
                if(a==b)return false;
            }
        }

        return true;
    }
}